{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\react-projects\\\\starter-project-react-github-search-users-master\\\\src\\\\context\\\\context.js\";\nimport React, { useState, useEffect } from \"react\";\nimport mockUser from \"./mockData.js/mockUser\";\nimport mockRepos from \"./mockData.js/mockRepos\";\nimport mockFollowers from \"./mockData.js/mockFollowers\";\nimport axios from \"axios\";\nconst rootUrl = \"https://api.github.com\";\nconst GithubContext = React.createContext();\n\nconst GithubProvider = ({\n  children\n}) => {\n  const [githubUser, setGithubUser] = useState(mockUser);\n  const [repos, setRepos] = useState(mockRepos);\n  const [followers, setFollowers] = useState(mockFollowers);\n  const [requests, setRequests] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState({\n    show: false,\n    msg: \"\"\n  });\n\n  const searchGithubUser = async user => {\n    toggleError(); // setLoading(true);\n\n    const response = await axios(`${rootUrl}/users/${user}`).catch(err => console.log(err));\n    console.log(response);\n\n    if (response) {\n      setGithubUser(response.data);\n    } else {\n      toggleError(true, \"there is no user with that username\");\n    }\n\n    checkRequests();\n    setIsLoading(false);\n  };\n\n  const checkRequests = () => {\n    axios(`${rootUrl}/rate_limit`).then(({\n      data\n    }) => {\n      let {\n        rate: {\n          remaining\n        }\n      } = data;\n      setRequests(remaining);\n\n      if (remaining === 0) {\n        toggleError(true, \"sorry, you have exceeded your hourly rate limit!\");\n      }\n    }).catch(err => console.log(err));\n  };\n\n  function toggleError(show = false, msg = \"\") {\n    setError({\n      show,\n      msg\n    });\n  }\n\n  useEffect(checkRequests, []);\n  return /*#__PURE__*/React.createElement(GithubContext.Provider, {\n    value: {\n      githubUser,\n      repos,\n      followers,\n      requests,\n      error,\n      searchGithubUser,\n      isLoading\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport { GithubProvider, GithubContext };","map":{"version":3,"sources":["D:/React/react-projects/starter-project-react-github-search-users-master/src/context/context.js"],"names":["React","useState","useEffect","mockUser","mockRepos","mockFollowers","axios","rootUrl","GithubContext","createContext","GithubProvider","children","githubUser","setGithubUser","repos","setRepos","followers","setFollowers","requests","setRequests","isLoading","setIsLoading","error","setError","show","msg","searchGithubUser","user","toggleError","response","catch","err","console","log","data","checkRequests","then","rate","remaining"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport mockUser from \"./mockData.js/mockUser\";\nimport mockRepos from \"./mockData.js/mockRepos\";\nimport mockFollowers from \"./mockData.js/mockFollowers\";\nimport axios from \"axios\";\n\nconst rootUrl = \"https://api.github.com\";\n\nconst GithubContext = React.createContext();\n\nconst GithubProvider = ({ children }) => {\n  const [githubUser, setGithubUser] = useState(mockUser);\n  const [repos, setRepos] = useState(mockRepos);\n  const [followers, setFollowers] = useState(mockFollowers);\n  const [requests, setRequests] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState({ show: false, msg: \"\" });\n\n  const searchGithubUser = async (user) => {\n    toggleError();\n    // setLoading(true);\n    const response = await axios(`${rootUrl}/users/${user}`).catch((err) =>\n      console.log(err)\n    );\n    console.log(response);\n    if (response) {\n      setGithubUser(response.data);\n    } else {\n      toggleError(true, \"there is no user with that username\");\n    }\n    checkRequests();\n    setIsLoading(false);\n  };\n\n  const checkRequests = () => {\n    axios(`${rootUrl}/rate_limit`)\n      .then(({ data }) => {\n        let {\n          rate: { remaining },\n        } = data;\n        setRequests(remaining);\n        if (remaining === 0) {\n          toggleError(true, \"sorry, you have exceeded your hourly rate limit!\");\n        }\n      })\n      .catch((err) => console.log(err));\n  };\n\n  function toggleError(show = false, msg = \"\") {\n    setError({ show, msg });\n  }\n\n  useEffect(checkRequests, []);\n\n  return (\n    <GithubContext.Provider\n      value={{\n        githubUser,\n        repos,\n        followers,\n        requests,\n        error,\n        searchGithubUser,\n        isLoading,\n      }}\n    >\n      {children}\n    </GithubContext.Provider>\n  );\n};\n\nexport { GithubProvider, GithubContext };\n"]},"metadata":{},"sourceType":"module"}